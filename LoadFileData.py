import streamlit as st
import pandas as pd
import io

# Routine per caricare file dati unico e separare le due sezioni "General Data" e
# "Piping Data" generando i rispettivi CSV sotto files.
def loadData():

    # Funzione per verificare se il file è stato generato da "HeatLoss4"
    def verifica_file(df):

        if 'DatiCaricati' not in st.session_state:
            st.session_state.DatiCaricati = False
            
        # Trova la colonna che contiene "HeatLoss4"
        colonna_heatloss = [col for col in df.columns if "HeatLoss4" in col]
        
        if len(colonna_heatloss) == 0:
            # Se non trova la colonna, significa che il file non è stato generato correttamente
            st.warning("File not generated by HeatLoss4.")
            return None
        else:
            # Estrarre la data e l'ora dalla colonna
            colonna_info = colonna_heatloss[0]
            st.success(f"File correctly generated by HeatLoss4.")
            
            # Estrai la data e l'ora dal nome della colonna
            data_ora = colonna_info.split(' - ')[1]
            st.write(f"Creation Date & Time: {data_ora}")
            return data_ora

    # Funzione per separare i dati in base alla colonna che contiene "HeatLoss4"
    def separa_dati(df):
        # Trova l'indice della colonna che contiene "HeatLoss4"
        colonne_heatloss = [col for col in df.columns if "HeatLoss4" in col]
        
        if len(colonne_heatloss) == 0:
            st.error("No reference to HeatLoss4 app has been found.")
            return None, None
        
        colonna_heatloss_idx = colonne_heatloss[0]  # Nome della colonna "HeatLoss4"
        idx = df.columns.get_loc(colonna_heatloss_idx)  # Ottieni l'indice numerico della colonna
        
        # Separa i due set di dati
        dati_generali = df.iloc[:, :idx].dropna(how='all')  # Dati fino alla colonna HeatLoss4
        dati_piping = df.iloc[:, idx+1:].dropna(how='all')  # Dati dopo la colonna HeatLoss4
        
        return dati_generali, dati_piping

    # Carica il file unito tramite uploader
    uploaded_file = st.file_uploader("Select a valid HeatLoss4 data file", type="csv")

    if uploaded_file is not None:
        # Leggi il file caricato in un DataFrame
        df_unito = pd.read_csv(uploaded_file)
        
        # Verifica se il file è stato generato da HeatLoss4
    
        data_ora = verifica_file(df_unito)
    
        if data_ora:
            # Mostra un'anteprima del file solo se la verifica è andata a buon fine
            st.write("Single File:")
            st.dataframe(df_unito)

            # Separa i dati
            dati_generali, dati_piping = separa_dati(df_unito)
            
            if dati_generali is not None and dati_piping is not None:
                st.session_state.DatiCaricati = True
                dati_generali_vis = dati_generali.loc[:, ~dati_generali.columns.str.contains('^Unnamed')]
                dati_piping_vis = dati_piping.loc[:, ~dati_piping.columns.str.contains('^Unnamed')]
                
                # Mostra un'anteprima dei dati separati
                st.write("General Data:")
                st.dataframe(dati_generali_vis)
                
                st.write("Piping Data:")
                st.dataframe(dati_piping_vis)
                
                # Salva i file CSV localmente o su un percorso remoto
                # In questo esempio, i file vengono salvati localmente
                dati_generali.to_csv("files/DatiGenerali.csv", index=False)
                dati_piping.to_csv("files/DatiPiping.csv", index=False)
                
                st.success("General & Piping Data loaded successfully!")


